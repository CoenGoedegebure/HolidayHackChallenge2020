from naughty_nice import Chain
from mt19937 import mt19937, untemper


# Split a 64bit integer into 2 32bit integers
def split_64into32(num64):
    high = num64 >> 32
    low = num64 & 0xFFFFFFFF
    return low, high

# Create a 64bit integer by joining 2 32bit integers
def join_32into64(low, high):
    return high << 32 | low


def objective_11a():
    required_index = 130000         # The index of which we want to predict the nonce
    prng = mt19937(0)

    # Load the blockchain data
    c2 = Chain(load=True, filename='blockchain.dat')

    # Untemper the nonces
    # The nonces are 64-bit, and the prng prediction algorithm is based on 32-bit integers
    # The 64-bit random nonce is expected to be generated by putting 2 32-bit integers together.
    # This means we don't need 624 nonces, but just 312. Of these 312 nonces, we can untemper the least and
    # most significant 32-bit integers.
    num_blocks_required = int(mt19937.n / 2)

    # The first nonce to untemper is the one of the block that is 312 indices from the end of the current chain.
    first_index_to_untemper = len(c2.blocks) - num_blocks_required

    for i in range(num_blocks_required):
        index = first_index_to_untemper + i

        nonce = c2.blocks[index].nonce
        low, high = split_64into32(nonce)

        # First untemper the least significant (low) and then the most significant (high) 32-bit part of the nonce
        prng.MT[i * 2] = untemper(low)
        prng.MT[i * 2 + 1] = untemper(high)

        print(f'Untempered nonce for block {c2.initial_index + index}: {hex(nonce)}')

    # Predict the indices towards the required index
    for i in range(c2.index, required_index):
        # For the number extraction, take the same order as was used for the untempering.
        # First extract the least significant (low) and then the most significant (high) 32-bit part of the nonce
        nonce_low = prng.extract_number()
        nonce_high = prng.extract_number()

        # Join the 32bit integers into a 64bit integer
        nonce = hex(join_32into64(nonce_low, nonce_high))

        marker = '<<<<-- ANSWER' if i + 1 == required_index else ''             # Mark the predicted nonce as the answer
        print(f'Nonce for index {i + 1} is predicted as {nonce} {marker}')

# Answer: 0x57066318f32f729d

objective_11a()
